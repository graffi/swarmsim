[Simulator]
## Seedvalue for the same random sequence
## Different number creates a different random sequence
seedvalue = 254

## Maximum round number in swarm-world, 0 = infinite
max_round = 2000

## 1/True = Call of particles in randmom order
## 0/False = Call of particles in added order in scenario
particle_random_order = False
## 1/True = Call of particles in randmom order after each round
## 0/False = Call of particles in randmom order only once at the start of the simulator
particle_random_order_always = False
## Viewing window size in pixels
window_size_x = 1280
window_size_y = 720

[Visualization]
# Visualization 1 = On, 0 = Off
visualization = 1

#gui
gui = default_gui


# Grid Configs. uncomment your choice!


;# Quadratic Grid grid default configs:
;grid_class = QuadraticGrid
;particle_model_file = 2d_particle.obj
;tile_model_file = 2d_quad_tile.obj
;location_model_file = 2d_location.obj
;grid_size = 1000
;# end of Quadratic grid configs


;# Triangular grid default configs:
grid_class = TriangularGrid
particle_model_file = 2d_particle.obj
tile_model_file = 2d_hex_tile.obj
location_model_file = 2d_location.obj
predator_model_file = 2d_predator.obj
grid_size = 100
;# end of Triangular grid configs


;# cubic grid default configs:
;grid_class = CubicGrid
;particle_model_file = 3d_particle.obj
;tile_model_file = 3d_cube_tile.obj
;location_model_file = 3d_location.obj
;grid_size = 10
;# end of cubic grid configs


# ccp grid default configs:
;grid_class = CCPGrid
;particle_model_file = 3d_particle.obj
;tile_model_file = 3d_ccp_tile.obj
;location_model_file = 3d_location.obj
;grid_size = 10
# end of ccp grid configs


# matter default colors (rgba)
particle_color = (0.0, 0.0, 0.0, 1.0)
particle_scaling = (1.0, 1.0, 1.0)

tile_color = (0.3, 0.3, 0.8, 1.0)
tile_scaling = (1.0, 1.0, 1.0)

location_color = (0.3, 0.8, 0.3, 1.0)
location_scaling = (1.2, 1.2, 1.2)

predator_color = (255, 0, 0, 1.0)
predator_scaling = (1.2, 1.2, 1.2)

grid_color = (0.0, 0.0, 0.0, 1.0)
cursor_color = (0.5, 0.5, 0.5, 0.5)
center_color = (1.0, 0.0, 0.0, 0.5)

# background  (rgb)
background_color = (1.0, 1.0, 1.0)
# color of grid lines (rgba)
line_color = (0.0, 0.0, 0.0, 0.1)
# length/scaling of the grid lines (max should be 1,1,1)
line_scaling = (1.0, 1.0, 1.0)
# flag for showing the lines
show_lines = True
# color of grid coordinates (rgba)
coordinates_color = (0.0, 0.0, 0.0, 1.0)
# size/scaling of the coordinate model. wouldn't make it bigger than 0.2, 0.2, 0.2
coordinates_scaling = (0.05, 0.05, 0.05)
# flag for showing the coordinate models
show_coordinates = False
# flag for showing the center of the grid
show_center = True
# camera focus color
focus_color = (1.0, 1.0, 1.0, 0.5)
# show camera focus
show_focus = False

# Camera init values
look_at = (0.0, 0.0, 0.0)
phi = -90
theta = 0
radius = 10
fov = 40
cursor_offset = -10
render_distance = 1000

[World]

## False = Unlimited world size
## True = limited world size
border = True

## Swarm-World world size in points
## Works only with border flag set on True
size_x = 200.0
size_y = 200.0

## Maximum number of particles that can be created while simulating
max_particles = 100000000

[Matter]
## with memory (mm) limitation 1=Yes 0=No
memory_limitation = False

## mm size in quantity 
## Works only with memory_limitation flag set on 1
location_mm_size = 2
particle_mm_size = 2
tile_mm_size = 2

[Routing]

ms_size = 1000
ms_strategy = 0
scan_radius = 1
# Epidemic = 0
# Epidemic_MANeT = 1
# One_Leader_Flocking = 2
# Multi_Leader_Flocking = 3
# Average_Consensus_Flocking = 4
# Prophet = 5
algorithm = 3
message_ttl = 10
l_encounter = 0.75
gamma = 0.99
beta = 0.25
p_init = 0.75

[Communication]
signal_velocity = 2
signal_range = 100

[MobilityModel]

mm_mode = 7
mm_length = 15
mm_zone = [0, 0, 0, 0]
#mm_starting_dir = None

[Memory]
memory_mode = 1

[Flocking]
flock_radius = 2
leader_count = 1
commit_quorum = 0.6
# predator config
predator_scan_radius = 5
predator_chase_mode = 1
predator_chase_rounds = 10
[File]

csv_generator = lib.oppnet.csv_generator
# leader flocking
particle = lib.oppnet.leader_flocking.opp_particle
# consensus_flocking
#particle = lib.oppnet.consensus_flocking.opp_particle

## One Leader flocking
scenario = almost_optimal_flock
solution = oppnet_flocking.leader_flocking.one_leader_flocking

## Multi Leader flocking
#scenario = almost_optimal_flock
#solution = oppnet_flocking.leader_flocking.multi_leader_flocking

## Average consensus flocking
#scenario = almost_optimal_flock
#solution = oppnet_flocking.consensus_flocking.simple_average

## Most common consensus flocking
#scenario = almost_optimal_flock
#solution = oppnet_flocking.consensus_flocking.most_common

## Predator Test
#scenario = optimal_flock
#solution = oppnet_flocking.consensus_flocking.regrouping